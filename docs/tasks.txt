*** BUGS ***


5. А почему тут interface Sorter<T extends Comparable> Comparable не параметризованный?
6. А зачем при сортировке создавать новый ArrayList?
7. Есть такая штука Collections.swap - погляди. В данном задание было бы удобно.
8. А чего ты у класса Heap съел все javadoc?
9. Main конечно выглядит жутко... :)


*** DONE ***
1. Чтобы не писать  ComparableInteger implements spbau.velikiy.task4.core.Comparable лучше сделать import
Убрал интерфейсы Comparator и Comparable. Использовал стандартные.

2. А зачем ты сделал у метода compareTo возврат 0 или +1? Обычно делают 0, число меньшее 0 или число большее 0.
Используются стандартные правила.

3. Если ты везде переопределяешь toString в наследниках Comparable, то можно было прямо в интерфейсе 
Comparable объявить toString. Тогда все наследники были бы обязаны его реализовывать.
Теперь таких интерфейсов нет вовсе.

4. А почему не вынес этот код 
    public void sort(List<T> list) {
        
        this.sort(list, new Comparator<T>() {
            public int compare(T a, T b) {
                return a.compareTo(b);
            }
        });

    }
В Sorter? Зачем тут this?

Добавлен AbstractSorter что бы рализовать интерфейс частично.